@inject ConfiguratorData ConfiguratorData

<h4 class="card-header">@MinecraftServer.ID - Port @MinecraftServer.ServerProperties.ServerPort = Version @MinecraftServer.Version</h4>

<div class="btn-group">
    <button @onclick="@MinecraftServer.StartServer"
            disabled="@(MinecraftServer.Running)"
            class="btn @(MinecraftServer.Running ? "" : "btn-primary")">
        Start server
    </button>

    <button @onclick="@MinecraftServer.StopServer"
            disabled="@(!MinecraftServer.Running)"
            class="btn @(!MinecraftServer.Running ? "" : "btn-primary")">
        Stop server
    </button>

    <button @onclick="@(() => CurrentServer.ShowProperties = !CurrentServer.ShowProperties)"
            class="btn btn-secondary">
        @(CurrentServer.ShowProperties ? "Back" : "Show properties")
    </button>
</div>

@if (CurrentServer.ShowProperties)
{
    <div class="card-body">
        <PropertiesChanger MinecraftServer="MinecraftServer"></PropertiesChanger>
    </div>
}
else
{
    <input @bind="@CurrentServer.CurrentCommand"
           @onkeypress="(enter) => {
                        if(KeyPressed(enter))
                        {
                            CurrentServer.CurrentCommand = null;
                        }
                    }"
           @oninput="Input"
           type="text"
           placeholder="Enter a command"
           class="form-control" />

    <div class="card-body pre-scrollable h-25 card-text">
        @foreach (var message in CurrentServer.Messages)
        {
            <p>@message</p>
        }
    </div>
}

@code {
    [Parameter]
    public Server MinecraftServer { get; set; }

    private ServerData CurrentServer => ConfiguratorData.AllServerData[MinecraftServer.ID];

    protected override void OnParametersSet()
    {
        if (!ConfiguratorData.AllServerData.ContainsKey(MinecraftServer.ID))
        {
            ConfiguratorData.AllServerData.Add(MinecraftServer.ID, new ServerData());
        }

        CurrentServer.Messages.CollectionChanged += (a, b) => this.InvokeAsync(StateHasChanged);

        if (!CurrentServer.LoggingNewMessages)
        {
            MinecraftServer.Log += (msg) =>
            {
                CurrentServer.Messages.Insert(0, msg);
            };

            CurrentServer.LoggingNewMessages = true;
        }
    }

    private void Input(ChangeEventArgs changeEventArgs)
    {
        CurrentServer.CurrentCommand = (string)changeEventArgs.Value;
    }

    private bool KeyPressed(KeyboardEventArgs keyboard)
    {
        if (keyboard.Key == "Enter")
        {
            MinecraftServer.RunACommand(CurrentServer.CurrentCommand);

            CurrentServer.Commands.Add(CurrentServer.CurrentCommand);

            return true;
        }

        return false;
    }
}
