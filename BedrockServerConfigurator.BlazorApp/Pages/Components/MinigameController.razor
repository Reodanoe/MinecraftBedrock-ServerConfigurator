@inject Configurator config

<div class="row">
    @foreach (var player in MinecraftServer.AllPlayers)
     {
        <PlayerCard Player="player">
            @if (player.IsOnline)
             {
                if (!minigameRunning)
                {
                    <button class="btn btn-primary"
                            @onclick="() =>
                                      {
                                          if (IsPlayerSelected(player)) RemovePlayerFromSelectedPlayers(player);
                                          else selectedPlayers.Add(player);
                                      }">
                        @(IsPlayerSelected(player) ? "Remove from minigame" : "Add to minigame")
                    </button>
                }

                <button class="btn btn-primary"
                        @onclick="async () => await api.Op(player)">
                    Op
                </button>

                <button class="btn btn-primary"
                        @onclick="async () => await api.DeOp(player)">
                    De-op
                </button>
             }
        </PlayerCard>
     }
</div>

@if (minigameRunning)
{
    <h3>Minigame running for players</h3>

    foreach (var player in minigame.GroupedMicrogamesByPlayer)
    {
        <p>@player.Key.Username</p>
    }
}

<button class="btn btn-primary" @onclick="Start" disabled="@(minigameRunning || !selectedPlayers.Any())">Start minigame</button>
<button class="btn btn-primary" @onclick="Stop" disabled="@(!minigameRunning)">Stop minigame</button>

<h4>Delay</h4>
Run microgames all at once: <input type="checkbox" @bind="allAtOnce" class="form-check" />

<h4>Delay</h4>
Min delay: <input @bind="minDelay" />
Max delay: <input @bind="maxDelay" />

<h4>Teleport up</h4>
Min blocks: <input type="number" @bind="minBlocks" placeholder="Min blocks" />
Max blocks: <input type="number" @bind="maxBlocks" placeholder="Max blocks" />

<h4>Mob spawner</h4>
Min mobs: <input type="number" @bind="minMobs" placeholder="Min mobs" />
Max mobs: <input type="number" @bind="maxMobs" placeholder="Max mobs" />

@code {
    [Parameter]
    public Server MinecraftServer { get; set; }

    private ServerApi api;

    private List<ServerPlayer> selectedPlayers = new List<ServerPlayer>();
    private Minigame minigame;

    private bool minigameRunning;

    protected override void OnParametersSet()
    {
        api = new ServerApi(MinecraftServer);

        MinecraftServer.PlayerConnected += PlayerConnected;
        MinecraftServer.PlayerDisconnected += PlayerDisconnected;

        void PlayerConnected(ServerPlayer joined)
        {
            InvokeAsync(StateHasChanged);
        }

        void PlayerDisconnected(ServerPlayer left)
        {
            selectedPlayers.Remove(left);

            InvokeAsync(StateHasChanged);
        }
    }

    private TimeSpan minDelay = TimeSpan.FromSeconds(30);
    private TimeSpan maxDelay = TimeSpan.FromMinutes(3);

    private int minBlocks = 5;
    private int maxBlocks = 20;

    private int minMobs = 2;
    private int maxMobs = 7;

    private bool allAtOnce;

    private List<Microgame> BasicMicrogames(ServerPlayer player)
    {
        return new List<Microgame>
        {
            new TeleportUpMicrogame(minDelay, maxDelay, player, api, minBlocks, maxBlocks),
            new SpawnRandomMobsMicrogame(minDelay, maxDelay, player, api, minMobs, maxMobs),
            new BadEffectMicrogame(minDelay, maxDelay, player, api)
        };
    }

    private void Start()
    {
        Stop();

        var listMicrogames = new List<Microgame>();

        foreach (var p in selectedPlayers)
        {
            listMicrogames.AddRange(BasicMicrogames(p));
        }

        minigame = new Minigame(listMicrogames, allAtOnce);
        minigame.Start();

        minigameRunning = true;
    }

    private void Stop()
    {
        if (minigame != null)
        {
            minigame.Stop();
        }

        minigameRunning = false;
    }

    private string HowLongAgoInMinutes(DateTime date)
    {
        var time = DateTime.Now.Subtract(date);
        var minutes = Math.Floor(time.TotalMinutes);

        return $"{minutes} minutes";
    }

    private bool IsPlayerSelected(Player p)
    {
        return selectedPlayers.FirstOrDefault(x => x.Xuid == p.Xuid) != null;
    }

    private void RemovePlayerFromSelectedPlayers(Player p)
    {
        selectedPlayers.RemoveAll(x => x.Xuid == p.Xuid);
    }
}
