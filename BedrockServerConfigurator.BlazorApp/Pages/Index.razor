@page "/"
@inject Configurator config
@inject ConfiguratorData data

<h2>Configuration Controller</h2>

<div class="text-center">
    <button @onclick="LoadServers"
            class="btn btn-success"
            disabled="@(!config.AllServerDirectoriesPaths().Any())">
        Load all servers
    </button>

    <button @onclick="Kill"
            class="btn btn-danger">
        Kill all servers
    </button>

    <button @onclick="New"
            class="btn btn-outline-secondary"
            disabled="@(!config.TemplateServerExists || data.CreatingNewServer || data.IsDownloading)">
        @(NewServerButtonText())
    </button>

    <button @onclick="Download"
            class="btn @((config.TemplateServerExists || data.NewDownloadStarted) && !data.ServerDownloaded ? "btn-outline-secondary" : "btn-success")"
            disabled="@(config.TemplateServerExists || data.NewDownloadStarted)">
        @(DownloadButtonText())
    </button>
</div>

<div class="row">
    <h4 class="col-md-12">Available servers</h4>
    @foreach (var server in config.AllServerDirectoriesNames())
    {
        <div class="col-md-2">
            @server
        </div>
    }
</div>

<div class="row">
    <h3 class="col-md-12">Loaded servers</h3>
    @foreach (var server in config.AllServers)
    {
        <div class="col-md-4 card">
            <ServerController MinecraftServer="server.Value"></ServerController>
        </div>
    }
</div>

@code {
    protected override void OnInitialized()
    {
        data.PropertyChanged += (a, b) => this.InvokeAsync(StateHasChanged);

        config.TemplateServerDownloadChanged += (_, args) =>
        {
            data.PercentDownloaded = args.ProgressPercentage;
        };
    }

    private void LoadServers()
    {
        config.LoadServers();
    }

    private void Kill()
    {
        config.StopAllServers();

        Utilities.KillRunningMinecraftServers();
    }

    private async void Download()
    {
        data.NewDownloadStarted = true;

        await config.DownloadBedrockServer();

        data.ServerDownloaded = true;
    }

    private async void New()
    {
        data.CreatingNewServer = true;

        await Task.Run(config.NewServer);

        data.CreatingNewServer = false;
    }

    private string DownloadProgress()
    {
        if (data.PercentDownloaded < 100)
        {
            return $"{data.PercentDownloaded}% downloaded";
        }
        else if (!data.ServerDownloaded)
        {
            return "Unzipping...";
        }
        else
        {
            return "Download finished!";
        }
    }

    private string DownloadButtonText()
    {
        if (data.NewDownloadStarted)
        {
            return DownloadProgress();
        }
        else if (!data.NewDownloadStarted && config.TemplateServerExists)
        {
            return "Template server is already downloaded";
        }
        else
        {
            return "Download template server";
        }
    }

    private string NewServerButtonText()
    {
        if (data.CreatingNewServer)
        {
            return "Creating new server...";
        }
        else if (!config.TemplateServerExists)
        {
            return "Download template server first";
        }
        else if (data.IsDownloading)
        {
            return "Please wait...";
        }
        else
        {
            return "New server";
        }
    }
}
