@page "/ServerPage/{id:int}"
@inject Configurator config

@if (minecraftServer == null)
{
    <p>No server with id @Id exists</p>
}
else if (!minecraftServer.Running)
{
    <p>Server isn't running</p>
    <button class="btn btn-primary" @onclick="minecraftServer.StartServer">Start server</button>
}
else
{
    @foreach (var player in minecraftServer.AllPlayers)
    {
        <div class="card" style="width: 18rem;">
            <div class="card-body">
                <h5 class="card-title">@player.Name</h5>
                <p class="card-text">Xuid - @player.Xuid</p>
                <p class="card-text">
                    @(player.IsOnline ? $"Has been online since: {player.LastAction} = {ProcessTime(player.LastAction)}"
                                      : $"Last online: {player.LastAction} = {ProcessTime(player.LastAction)} ago")
                </p>
                <button class="btn btn-primary"
                        disabled="@(!player.IsOnline)"
                        @onclick="() =>
                                  {
                                      if (IsPlayerSelected(player)) RemovePlayerFromSelected(player);
                                      else selectedPlayers.Add(player);
                                  }">
                    @(player.IsOnline ? (IsPlayerSelected(player) ? "Remove player" : "Select player") : "Player is offline")
                </button>
            </div>
        </div>
    }

    <button class="btn btn-primary" @onclick="Start">Start hell</button>
}

@code {
    [Parameter]
    public int Id { get; set; }

    private Server minecraftServer;
    private Api api;

    List<ServerPlayer> selectedPlayers = new List<ServerPlayer>();
    Minigame runningMinigame;

    protected override void OnParametersSet()
    {
        if (config.AllServers.TryGetValue(Id, out Server server))
        {
            minecraftServer = server;
            api = new Api(config);
        }
    }

    private List<Microgame> BasicMicrogames(ServerPlayer player)
    {
        return new List<Microgame>
        {
#if DEBUG
            new TeleportUpMicrogame(TimeSpan.FromSeconds(10), TimeSpan.FromSeconds(20), player, api, 5, 20),
            new SpawnRandomMobsMicrogame(TimeSpan.FromSeconds(10), TimeSpan.FromSeconds(20), player, api, 3, 7),
            new BadEffectMicrogame(TimeSpan.FromSeconds(10), TimeSpan.FromSeconds(20), player, api)
#else
            new TeleportUpMicrogame(TimeSpan.FromSeconds(30), TimeSpan.FromMinutes(3), player, api, 5, 20),
            new SpawnRandomMobsMicrogame(TimeSpan.FromSeconds(30), TimeSpan.FromMinutes(3), player, api, 3, 7),
            new BadEffectMicrogame(TimeSpan.FromSeconds(30), TimeSpan.FromMinutes(3), player, api)
#endif
        };
    }

    private void Start()
    {
        if (runningMinigame != null)
        {
            Stop();
        }

        var listMicrogames = new List<Microgame>();

        foreach (var p in selectedPlayers)
        {
            listMicrogames.AddRange(BasicMicrogames(p));
        }

        runningMinigame = new Minigame(listMicrogames, false);
        runningMinigame.Start();
    }

    private void Stop()
    {
        runningMinigame.Stop();
    }

    private string ProcessTime(DateTime date)
    {
        var time = DateTime.Now.Subtract(date);
        var minutes = Math.Round(time.TotalMinutes, 1);

        return $"{minutes} minutes";
    }

    private bool IsPlayerSelected(Player p)
    {
        return selectedPlayers.FirstOrDefault(x => x.Xuid == p.Xuid) != null;
    }

    private void RemovePlayerFromSelected(Player p)
    {
        selectedPlayers.RemoveAll(x => x.Xuid == p.Xuid);
    }
}
