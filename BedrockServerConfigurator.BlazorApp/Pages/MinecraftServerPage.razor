@page "/ServerPage/{id:int}"
@inject Configurator config

@if (minecraftServer == null)
{
    <p>No server with id @Id exists</p>
}
else if (!minecraftServer.Running)
{
    <p>Server isn't running</p>
    <button class="btn btn-primary" @onclick="() => minecraftServer.StartServer()">Start server</button>
}
else
{
    @foreach (var player in minecraftServer.AllPlayers)
    {
        <div class="card" style="width: 18rem;">
            <div class="card-body">
                <h5 class="card-title">@player.Username</h5>
                <p class="card-text">Xuid - @player.Xuid</p>
                <p class="card-text">
                    @(player.IsOnline ? $"Has been online since: {player.LastAction} = {ProcessTime(player.LastAction)}"
                                      : $"Last online: {player.LastAction} = {ProcessTime(player.LastAction)} ago")
                </p>
                <button class="btn btn-primary"
                        disabled="@(!player.IsOnline)"
                        @onclick="() =>
                                  {
                                      if (IsPlayerSelected(player)) RemovePlayerFromSelected(player);
                                      else selectedPlayers.Add(player);
                                  }">
                    @(player.IsOnline ? (IsPlayerSelected(player) ? "Remove player" : "Select player") : "Player is offline")
                </button>
            </div>
        </div>
    }

    <div class="card">
        <div class="card-body">
            <h5 class="card-title">Spawn mobs</h5>
            <label for="mob-name">Name of mob</label>
            <input type="text" id="mob-name" />

            <label for="amount">Amount of mobs</label>
            <input type="number" id="amount" />
        </div>
    </div>

    <button class="btn btn-primary" @onclick="RunActions">Start hell</button>
}

@code {
    [Parameter]
    public int Id { get; set; }

    private Server minecraftServer;
    private Api api;

    List<Player> selectedPlayers = new List<Player>();
    List<Action<Player>> actionsToDo = new List<Action<Player>>();

    // on this page
    // player names appear
    // makes those names red if the logged of IsOnline == false
    // when a player is clicked it's selected
    // then you can choose which action will happen
    // the action will have parameters that can be set
    // multiple players can be seletected at once

    protected override void OnParametersSet()
    {
        if (config.AllServers.TryGetValue(Id, out Server server))
        {
            minecraftServer = server;
            api = new Api(config);

            // maybe I can make like a class that will generate these actions
            // so I can easier show them on the page
            actionsToDo.Add(SpawnMobsAction("creeper", 10));
            // actionsToDo.Add(TeleportUpAction(10));
        }
    }

    private string ProcessTime(DateTime date)
    {
        var time = DateTime.Now.Subtract(date);
        var minutes = Math.Round(time.TotalMinutes, 1);

        return $"{minutes} minutes";
    }

    private bool IsPlayerSelected(Player p)
    {
        return selectedPlayers.FirstOrDefault(x => x.Xuid == p.Xuid) != null;
    }

    private void RemovePlayerFromSelected(Player p)
    {
        selectedPlayers.RemoveAll(x => x.Xuid == p.Xuid);
    }

    private Action<Player> SpawnMobsAction(string mob, int amount)
    {
        return new Action<Player>((player) =>
        {
            api.SpawnMobsOnAPlayer(Id, player.Name, mob, amount);
        });
    }

    private Action<Player> TeleportUpAction(int distance)
    {
        return new Action<Player>((player) =>
        {
            api.TeleportEntityLocal(Id, player.Name, 0, distance, 0);
        });
    }

    private void RunActions()
    {
        foreach (var p in selectedPlayers)
        {
            if (!p.IsOnline) continue;

            foreach (var action in actionsToDo)
            {
                action(p);
            }
        }
    }
}
